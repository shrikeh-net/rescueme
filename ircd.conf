/* doc/example.conf - ircd-hybrid-8 Example configuration file
 * Copyright (C) 2000-2013 Hybrid Development Team
 *
 * Written by ejb, wcampbel, db, leeh and others
 * Other example configurations can be found in the source dir under
 * doc/.
 *
 * $Id: example.conf 1816 2013-04-12 10:53:03Z michael $
 * 
 * This version has been customized for Debian.
 *
 */

/* IMPORTANT NOTES:
 *
 * auth {} blocks MUST be specified in order of precedence.  The first one
 * that matches a user will be used.  So place spoofs first, then specials,
 * then general access.
 *
 * Shell style (#), C++ style (//) and C style comments are supported.
 *
 * Files may be included by either:
 *        .include "filename"
 *        .include <filename>
 *
 * Times/durations are written as:
 *        12 hours 30 minutes 1 second
 *        
 * Valid units of time:
 *        year, month, week, day, hour, minute, second
 *
 * Valid units of size:
 *        megabyte/mbyte/mb, kilobyte/kbyte/kb, byte
 *
 * Sizes and times may be singular or plural.  
 */ 

/* EFNET NOTE:
 *
 * This config file is NOT suitable for EFNet.  EFNet admins should use
 * example.efnet.conf
 */
 
/*
 * serverinfo {}:  contains information about the server
 */
serverinfo {
	/*
	 * name: the name of this server.  This cannot be changed at runtime.
	 */
	name = "hybrid8.debian.local";

	/*
	 * sid: a server's unique ID.  This is three characters long and must
	 * be in the form [0-9][A-Z0-9][A-Z0-9].  The first character must be
	 * a digit, followed by 2 alpha-numerical letters.
	 * NOTE: The letters must be capitalized.  This cannot be changed at runtime.
	 * IMPORTANT NOTE for Debian users: before you configure any links to
	 * other servers, change the sid to a value which will be unique within
	 * the network.
	 */
	sid = "0HY";

	/*
	 * description: the description of the server.
	 */
	description = "ircd-hybrid 8.0-debian";

	/*
	 * network info: the name and description of the network this server
	 * is on.  Shown in the 005 reply and used with serverhiding.
	 */
	network_name = "debian";
	network_desc = "i am a network short and stout";

	/*
	 * hub: allow this server to act as a hub and have multiple servers
	 * connected to it.
	 */
	hub = yes;

	/*
	 * vhost: the IP to bind to when we connect outward to ipv4 servers.
	 * This should be an ipv4 IP only, or "*" for INADDR_ANY.
	 */
	#vhost = "192.169.0.1";

	/*
	 * vhost6: the IP to bind to when we connect outward to ipv6 servers.
	 * This should be an ipv6 IP only, or "*" for INADDR_ANY.
	 */
	#vhost6 = "3ffe:80e8:546::2";

	/* max_clients: the maximum number of clients allowed to connect */
	max_clients = 512;

	/*
	 * max_nick_length: only applies to local clients. Must be in the
	 * range of 9 to 30. Default is 9 if nothing else is specified.
	 */
	max_nick_length = 15;

	/*
	 * max_topic_length: only applies to topics set by local clients.
	 * Must be in the range of 80 to 300. Default is 80 if nothing
	 * else is specified.
	 */
	max_topic_length = 350
};

/*
 * admin {}:  contains admin information about the server
 */
admin {
	name = "S. Ysadmin";
	description = "Main Server Administrator";
	email = "<root@localhost>";
};

/*
 * class {}:  contains information about classes for users
 */
class {
	/* name: the name of the class */
	name = "users";

	/*
	 * ping_time: how often a client must reply to a PING from the
	 * server before they are dropped.
	 */
	ping_time = 90 seconds;

	/*
	 * number_per_ip: how many local users are allowed to connect
	 * from one IP  (optional)
	 */
	number_per_ip = 2;

	/*
	 * max_local: how many local users are allowed to connect
	 * from one ident@host  (optional)
	 */
	max_local = 2;

	/*
	 * max_global: network-wide limit of users per ident@host  (optional)
	 */
	max_global = 10;

	/*
	 * max_number: the maximum number of users allowed in this class (optional)
	 */
	max_number = 100;

	/*
	 * the following lines are optional and allow you to define
	 * how many users can connect from one /NN subnet
	 */
	cidr_bitlen_ipv4 = 24;
	cidr_bitlen_ipv6 = 120;
	number_per_cidr = 16;

	/*
	 * sendq: the amount of data allowed in a clients send queue before
	 * they are dropped.
	 */
	sendq = 100 kbytes;

	/*
	 * recvq: maximum amount of data in a clients receive queue before
	 * they are dropped for flooding. Defaults to 2560 if the chosen
	 * value isn't within the range of 512 to 8000.
	 */
	recvq = 2560 bytes;
};

class {
	name = "opers";
	ping_time = 90 seconds;
	number_per_ip = 10;
	max_number = 100;
	sendq = 100 kbytes;

	/*
	 * min_idle: minimum idle time that is shown in /whois
	 */
	min_idle = 3 hours;

	/*
	 * max_idle: maximum idle time that is shown in /whois
	 */
	max_idle = 8 hours;

	/*
	 * flags:
	 *
	 * random_idle          - idle time is randomly selected within the
	 *                        range of min_idle to max_idle
	 * hide_idle_from_opers - fake idle time will be shown to operators, too
	 */
	flags = random_idle, hide_idle_from_opers;
};

class {
	name = "server";
	ping_time = 90 seconds;

	/*
	 * ping_warning: how fast a server must reply to a PING before
	 * a warning to opers is generated.
	 */
	ping_warning = 15 seconds;

	/*
	 * connectfreq: only used in server classes.  Specifies the delay
	 * between autoconnecting to servers.
	 */
	connectfreq = 5 minutes;

	/* max number: the amount of servers to autoconnect to */
	max_number = 1;

	/* sendq: servers need a higher sendq as they send more data */
	sendq = 2 megabytes;
};

/*
 * listen {}:  contains information about the ports ircd listens on
 */
listen {
	/*
	 * port: the specific port to listen on.  If no host is specified
	 * before, it will listen on all available IPs.
	 *
	 * Ports are separated via a comma, a range may be specified using ".."
	 */
	
	/* port: listen on all available IPs, ports 6665 to 6669 */
	port = 6665 .. 6669;

	/*
	 * host: set a specific IP/host the ports after the line will listen 
	 * on.  This may be ipv4 or ipv6.
	 */
	#host = "1.2.3.4";
	#port = 7000, 7001;

	#host = "3ffe:1234:a:b:c::d";
	#port = 7002;
};

/*
 * auth {}:  allow users to connect to the ircd
 */
auth {
	/*
	 * user: the user@host allowed to connect. Multiple user
	 * lines are permitted per auth block.
	 */
	user = "*@127.0.0.1";

	/* password: an optional password that is required to use this block */
	#password = "letmein";

	/*
	 * encrypted: controls whether the auth password above has been
	 * encrypted.
	 */
	#encrypted = yes;

	/*
	 * spoof: fake the users host to this.  This is free-form,
	 * just do everyone a favor and don't abuse it. ('=' prefix on /stats I)
	 */
	spoof = "i.love.debian.org";

	/* class: the class the user is placed in */
	class = "opers";

	/*
	 * need_password - don't allow users who haven't supplied the correct
	 *                 password to connect using another auth{} block
	 *                 ('&' prefix on /stats I if disabled)
	 * need_ident    - require the user to have identd to connect ('+' prefix on /stats I)
	 * spoof_notice  - enable spoofing notification to admins
	 * exceed_limit  - allow a user to exceed class limits ('>' prefix on /stats I)
	 * kline_exempt  - exempt this user from k/glines ('^' prefix on /stats I)
	 * gline_exempt  - exempt this user from glines ('_' prefix on /stats I)
	 * resv_exempt   - exempt this user from resvs ('$' prefix on /stats I)
	 * no_tilde      - remove ~ from a user with no ident ('-' prefix on /stats I)
	 * can_flood     - allow this user to exceed flood limits ('|' prefix on /stats I)
	 */
	flags = spoof_notice, exceed_limit, kline_exempt,
		gline_exempt, resv_exempt, no_tilde, can_flood;
};

#auth {
#	/*
#	 * redirect: the server and port to redirect a user to.  A user does
#	 * not have to obey the redirection, the ircd just suggests an alternative
#	 * server for them.
#	 */
#	redirserv = "this.is.not.a.real.server";
#	redirport = 6667;
#	
#	user = "*.server";
#
#	/* class: a class is required even though it is not used */
#	class = "users";
#};

auth {
	user = "*@*";
	class = "users";
	#flags = need_ident;
};

/*
 * operator {}:  defines ircd operators
 *
 * ircd-hybrid no longer supports local operators, privileges are
 * controlled via flags.
 */
#operator {
#	/* name: the name of the oper */
#	name = "root";
#
#	/*
#	 * user: the user@host required for this operator. Multiple
#	 * user="" lines are supported.
#	 */
#	user = "root@127.0.0.1";
#
#	/*
#	 * password: the password required to oper.  By default this will
#	 * need to be encrypted by using the provided mkpasswd tool.
#	 * Several password hash algorithms are available depending
#	 * on your system's crypt() implementation. For example, a modern
#	 * glibc already has support for SHA-256/512, and MD5 encryption
#	 * algorithms.
#	 */
#	#password = "$5$x5zof8qe.Yc7/bPp$5zIg1Le2Lsgd4CvOjaD20pr5PmcfD7ha/9b2.TaUyG4";
#
#	/*
#	 * encrypted: controls whether the oper password above has been
#	 * encrypted.
#	 */
#	encrypted = yes;
#
#	/*
#	 * rsa_public_key_file: the public key for this oper when using Challenge.
#	 * A password should not be defined when this is used, see 
#	 * doc/challenge.txt for more information.
#	 */
##	rsa_public_key_file = "/etc/ircd-hybrid/oper.pub";
#
#	/* class: the class the oper joins when they successfully /oper */
#	class = "opers";
#
#	/*
#	 * umodes: default usermodes opers get when they /oper.  If defined,
#	 * it will override oper_umodes settings in general {}.
#	 * Available usermodes:
#	 *
#	 * +b - bots         - See bot and drone flooding notices
#	 * +c - cconn        - Client connection/quit notices
#	 * +C - cconn_full   - Client connection/quit notices full
#	 * +D - deaf         - Don't receive channel messages
#	 * +d - debug        - See debugging notices
#	 * +f - full         - See auth{} block full notices
#	 * +e - external     - See remote server connection and split notices
#	 * +G - softcallerid - Server Side Ignore for users not on your channels
#	 * +g - callerid     - Server Side Ignore (for privmsgs etc)
#	 * +H - hidden       - Hides operator status to other users
#	 * +i - invisible    - Not shown in NAMES or WHO unless you share a
#	 *                     a channel
#	 * +j - rej          - See rejected client notices
#	 * +k - skill        - See server generated KILL messages
#	 * +l - locops       - See LOCOPS messages
#	 * +n - nchange      - See client nick changes
#	 * +s - servnotice   - See general server notices
#	 * +u - unauth       - See unauthorized client notices
#	 * +w - wallop       - See server generated WALLOPS
#	 * +y - spy          - See LINKS, STATS, TRACE notices etc.
#	 * +z - operwall     - See oper generated WALLOPS
#	 */
##	umodes = locops, servnotice, operwall, wallop;
#
#	/*
#	 * privileges: controls the activities and commands an oper is 
#	 * allowed to do on the server. All options default to no.
#	 * Available options:
#	 *
#	 * module       - allows MODULE
#	 * global_kill  - allows remote users to be /KILL'd
#	 * remote       - allows remote SQUIT and CONNECT
#	 * remoteban    - allows remote KLINE/UNKLINE
#	 * dline        - allows DLINE
#	 * undline      - allows UNDLINE
#	 * kline        - allows KILL and KLINE
#	 * unkline      - allows UNKLINE
#	 * gline        - allows GLINE
#	 * xline        - allows XLINE
#	 * globops      - allows GLOBOPS
#	 * operwall     - allows OPERWALL
#	 * nick_changes - allows oper to see nickchanges via usermode +n
#	 * rehash       - allows oper to REHASH config
#	 * die          - allows DIE
#	 * restart      - allows RESTART
#	 * set          - allows SET
#	 * admin        - gives admin privileges. admins for example,
#	 *                may see the real IP addresses of servers.
#	 */
#	flags = global_kill, remote, kline, unkline, xline, globops, restart,
#		die, rehash, nick_changes, admin, operwall;
#};

/*
 * service {}: specifies what server may act as a network service
 *
 * NOTE: it is absolutely important that every single server on the network
 *       has the same service{} block.
 */
#service {
#	name = "service.someserver";
#	name = "stats.someserver";
#};

/*
 * connect {}:  controls servers we connect to
 * IMPORTANT NOTE for Debian users: before you configure any links to
 * other servers, change the sid earlier in this config file to a
 * value which will be unique within the network.
 */
#connect {
#	/* name: the name of the server */
#	name = "irc.example.net";
#
#	/*
#	 * host: the host or IP to connect to.  If a hostname is used it
#	 * must match the reverse dns of the server.
#	 */
#	host = "192.168.0.1";
#
#	/*
#	 * vhost: the IP to bind to when we connect outward to servers.
#	 * serverinfo::vhost and serverinfo::vhost6 will be overridden
#	 * by this directive.
#	 */
#	vhost = "192.168.0.2";
#
#	/*
#	 * passwords: the passwords we send (OLD C:) and accept (OLD N:).
#	 * The remote server will have these passwords reversed.
#	 */
#	send_password = "password";
#	accept_password = "anotherpassword";
#
#	/*
#	 * encrypted: controls whether the accept_password above has been
#	 * encrypted.
#	 */
#	encrypted = no;
#
#	/* port: the port to connect to this server on */
#	port = 6666;
#
#	/*
#	 * hub_mask: the mask of servers that this server may hub.  Multiple
#	 * entries are permitted
#	 */
#	hub_mask = "*";
#
#	/*
#	 * leaf_mask: the mask of servers this server may not hub.  Multiple
#	 * entries are permitted.  Useful for forbidding EU -> US -> EU routes.
#	 */
#	#leaf_mask = "*.uk";
#
#	/* class: the class this server is in */
#	class = "server";
#
#	/*
#	 * autoconn   - controls whether we autoconnect to this server or not,
#	 *              dependent on class limits. By default, this is disabled.
#	 */
#	#flags = autoconn;
#};

#connect {
#	name = "ipv6.some.server";
#	host = "3ffd:dead:beef::1";
#	send_password = "password";
#	accept_password = "password";
#	port = 6666;
#
#	/*
#	 * aftype: controls whether the connection uses "ipv4" or "ipv6".
#	 * Default is ipv4.
#	 */
#	aftype = ipv6;
#	class = "server";
#};

/*
 * cluster {}:  servers that share klines/unkline/xline/unxline/resv/unresv/locops
 * automatically
 */
#cluster {
#	/*
#	 * name: the server to share with, this can take wildcards
#	 *
#	 * NOTE: only local actions will be clustered, meaning if
#	 *       the server receives a shared kline/unkline/etc, it
#	 *       will not be propagated to clustered servers.
#	 *
#	 *       Remote servers are not necessarily required to accept
#	 *       clustered lines, they need a shared{} for *THIS* server
#	 *       in order to accept them.
#	 */
#	name = "*.arpa";
#
#	/*
#	 * type: list of what to share, options are as follows:
#	 *      dline   - share dlines
#	 *      undline - share undlines
#	 *      kline   - share klines
#	 *      unkline - share unklines
#	 *      xline   - share xlines
#	 *      unxline - share unxlines
#	 *      resv    - share resvs
#	 *      unresv  - share unresvs
#	 *      locops  - share locops
#	 *      all     - share all of the above (default)
#	 */
#	type = kline, unkline, locops, xline, resv;
#};

/*
 * shared {}: users that are allowed to remote kline
 *
 * NOTE: This can be effectively used for remote klines.
 *       Please note that there is no password authentication
 *       for users setting remote klines.  You must also be
 *       /oper'd in order to issue a remote kline.
 */
shared {
	/*
	 * name: the server the user must be on to set klines.  If this is not
	 * specified, the user will be allowed to kline from all servers.
	 */
	name = "hybrid8.debian.local";

	/*
	 * user: the user@host mask that is allowed to set klines.  If this is
	 * not specified, all users on the server above will be allowed to set
	 * a remote kline.
	 */
	user = "root@localhost";

	/*
	 * type: list of what to share, options are as follows:
	 *      dline   - allow oper/server to dline
	 *      undline - allow oper/server to undline
	 *      kline   - allow oper/server to kline
	 *      unkline - allow oper/server to unkline
	 *      xline   - allow oper/server to xline
	 *      unxline - allow oper/server to unxline
	 *      resv    - allow oper/server to resv
	 *      unresv  - allow oper/server to unresv
	 *      locops  - allow oper/server to locops - only used for servers that cluster
	 *      all     - allow oper/server to do all of the above (default)
	 */
	type = kline, unkline, resv;
};

/*
 * kill {}:  users that are not allowed to connect
 * Oper issued klines will be added to the specified kline config
 */
#kill {
#	user = "bad@*.hacked.edu";
#	reason = "Obviously hacked account";
#};

#kill {
#	user = "^O[[:alpha:]]?[[:digit:]]+(x\.o|\.xo)$@^[[:alnum:]]{4}\.evilnet.tld$";
#
#	/*
#	 * NOTE: You have to set type=regex; when using a regular expression
#	 * based user entry
#	 */
#	type = regex;
#};

/*
 * deny {}:  IPs that are not allowed to connect (before DNS/ident lookup)
 * Oper issued dlines will be added to the specified dline config
 */
#deny {
#	ip = "10.0.1.0/24";
#	reason = "Reconnecting vhosted bots";
#};

/*
 * exempt {}: IPs that are exempt from deny {} and Dlines
 */
#exempt {
#	ip = "192.168.0.0/16";
#};

/*
 * resv {}:  nicks and channels users may not use/join
 */
resv {
	/* reason: the reason for the proceeding resv's */
	reason = "Reserved for services";

	/* resv: the nicks and channels users may not join/use */
	nick = "Global";
	nick = "DevNull";
	nick = "BotServ";
	nick = "Services";
	nick = "StatServ";
	nick = "HelpServ";
	nick = "HostServ";
	nick = "NickServ";
	nick = "ChanServ";
	nick = "MemoServ";
	nick = "OperServ";
	channel = "#services";

	/* resv: wildcard masks are also supported in nicks only */
	reason = "Clone bots";
	nick = "clone*";
};

/*
 * gecos {}:  The X: replacement, used for banning users based on
 * their "realname".
 */
#gecos {
#	name = "*sex*";
#	reason = "Possible spambot";
#};

#gecos {
#	name = "sub7server";
#	reason = "Trojan drone";
#};

#gecos {
#	name = "^\[J[0o]hn Do[3e]\]-[0-9]{2,5}$";
#
#	/*
#	 * NOTE: You have to set type=regex; when using a regular expression
#	 * based name entry
#	 */
#	type = regex;
#};

/*
 * channel {}:  The channel block contains options pertaining to channels
 */
channel {
	/*
	 * disable_fake_channels: this option, if set to 'yes', will
	 * disallow clients to create or join channels that have one
	 * of the following ASCII characters in their name:
	 *
	 *   2 | bold
	 *   3 | mirc color
	 *  15 | plain text
	 *  22 | reverse
	 *  29 | italic
	 *  31 | underline
	 * 160 | non-breaking space
	 */
	disable_fake_channels = yes;

	/*
	 * restrict_channels: reverse channel RESVs logic, only reserved
	 * channels are allowed
	 */
	restrict_channels = no;

	/*
	 * knock_delay: The amount of time a user must wait between issuing
	 * the knock command.
	 */
	knock_delay = 5 minutes;

	/*
	 * knock_delay_channel: How often a knock to any specific channel
	 * is permitted, regardless of the user sending the knock.
	 */
	knock_delay_channel = 1 minute;

	/*
	 * max_chans_per_user: The maximum number of channels a user can
	 * join/be on.
	 */
	max_chans_per_user = 25;

	/*
	 * max_chans_per_oper: The maximum number of channels an oper can
	 * join/be on.
	 */
	max_chans_per_oper = 50;

	/* quiet_on_ban: stop banned people talking in channels. */
	quiet_on_ban = yes;

	/* max_bans: maximum number of +b/e/I modes in a channel */
	max_bans = 100;

	/*
	 * how many joins in how many seconds constitute a flood, use 0 to
	 * disable. +b opers will be notified (changeable via /set)
	 */
	join_flood_count = 16;
	join_flood_time = 8 seconds;

	/*
	 * splitcode: The ircd will now check splitmode every few seconds.
	 *
	 * Either split users or split servers can activate splitmode, but
	 * both conditions must be met for the ircd to deactivate splitmode.
	 * 
	 * You may force splitmode to be permanent by /quote set splitmode on
	 */

	/*
	 * default_split_user_count: when the usercount is lower than this level,
	 * consider ourselves split.  This must be set for automatic splitmode.
	 */
	default_split_user_count = 0;

	/*
	 * default_split_server_count: when the servercount is lower than this,
	 * consider ourselves split.  This must be set for automatic splitmode.
	 */
	default_split_server_count = 0;

	/* no_create_on_split: disallow users creating channels on split. */
	no_create_on_split = yes;

	/* no_join_on_split: disallow users joining channels at all on a split. */
	no_join_on_split = no;
};

/*
 * serverhide {}:  The serverhide block contains the options regarding
 * serverhiding
 */
serverhide {
	/*
	 * flatten_links: this option will show all servers in /links appear
	 * that they are linked to this current server
	 */
	flatten_links = no;

	/*
	 * links_delay: how often to update the links file when it is
	 * flattened.
	 */
	links_delay = 5 minutes;

	/*
	 * hidden: hide this server from a /links output on servers that
	 * support it.  This allows hub servers to be hidden etc.
	 */
	hidden = no;

	/*
	 * hide_servers: hide remote servernames everywhere and instead use
	 * hidden_name and network_desc.
	 */
	hide_servers = no;

	/*
	 * Use this as the servername users see if hide_servers = yes.
	 */
	hidden_name = "*.hidden.example.net";

	/*
	 * hide_server_ips: If this is disabled, opers will be unable to see
	 * servers ips and will be shown a masked ip, admins will be shown the
	 * real ip.
	 *
	 * If this is enabled, nobody can see a servers ip. *This is a kludge*,
	 * it has the side effect of hiding the ips everywhere, including
	 * logfiles.
	 *
	 * We recommend you leave this disabled, and just take care with who you
	 * give administrator privileges to.
	 */
	hide_server_ips = no;
};

/*
 * general {}:  The general block contains many of the options that were once
 * compiled in options in config.h
 */
general {
	/* services_name: servername of nick/channel services */
	#services_name = "service.someserver";

	/* max_watch: maximum WATCH entries a client can have. */
	max_watch = 60;

	/* gline_enable: enable glines, network wide temp klines */
	gline_enable = yes;

	/*
	 * gline_duration: the amount of time a gline will remain on your
	 * server before expiring
	 */
	gline_duration = 1 day;

	/*
	 * gline_request_duration:  how long a pending G-line can be around.
	 * 10 minutes should be plenty
	 */
	gline_request_duration = 10 minutes;

	/*
	 * gline_min_cidr: the minimum required length of a CIDR bitmask
	 * for IPv4 based glines
	 */
	gline_min_cidr = 16;

	/*
	 * gline_min_cidr6: the minimum required length of a CIDR bitmask
	 * for IPv6 based glines
	 */
	gline_min_cidr6 = 48;

	/*
	 * Whether to automatically set mode +i on connecting users.
	 */
	invisible_on_connect = yes;

	/*
	 * Max time from the nickname change that still causes KILL
	 * automatically to switch for the current nick of that user.
	 */
	kill_chase_time_limit = 90 seconds;

	/*
	 * If hide_spoof_ips is disabled, opers will be allowed to see the real
	 * IP of spoofed users in /trace etc. If this is defined they will be
	 * shown a masked IP.
	 */
	hide_spoof_ips = yes;

	/*
	 * Ignore bogus timestamps from other servers.  Yes, this will desync
	 * the network, but it will allow chanops to resync with a valid non TS 0
	 *
	 * This should be enabled network wide, or not at all.
	 */
	ignore_bogus_ts = no;

	/*
	 * disable_auth: completely disable ident lookups; if you enable this,
	 * be careful of what you set need_ident to in your auth {} blocks
	 */
	disable_auth = no;

	/* disable_remote_commands: disable users doing commands on remote servers */
	disable_remote_commands = no;

	/*
	 * tkline_expire_notices: enables or disables temporary kline/xline
	 * expire notices.
	 */
	tkline_expire_notices = no;

	/*
	 * default_floodcount: the default value of floodcount that is configurable
	 * via /quote set floodcount.  This is the amount of lines a user
	 * may send to any other user/channel in one second.
	 */
	default_floodcount = 10;

	/*
	 * failed_oper_notice: send a notice to all opers on the server when 
	 * someone tries to OPER and uses the wrong password, host or ident.
	 */
	failed_oper_notice = yes;

	/*
	 * dots_in_ident: the amount of '.' characters permitted in an ident
	 * reply before the user is rejected.
	 */
	dots_in_ident = 2;

	/*
	 * min_nonwildcard: the minimum non wildcard characters in k/d/g lines
	 * placed via the server.  klines hand placed are exempt from limits.
	 * wildcard chars: '.' ':' '*' '?' '@' '!' '#'
	 */
	min_nonwildcard = 4;

	/*
	 * min_nonwildcard_simple: the minimum non wildcard characters in 
	 * gecos bans.  wildcard chars: '*' '?' '#'
	 */
	min_nonwildcard_simple = 3;

	/* max_accept: maximum allowed /accept's for +g usermode */
	max_accept = 20;

	/* anti_nick_flood: enable the nickflood control code */
	anti_nick_flood = yes;

	/* nick flood: the nick changes allowed in the specified period */
	max_nick_time = 20 seconds;
	max_nick_changes = 5;

	/*
	 * anti_spam_exit_message_time: the minimum time a user must be connected
	 * before custom quit messages are allowed.
	 */
	anti_spam_exit_message_time = 5 minutes;

	/*
	 * ts delta: the time delta allowed between server clocks before
	 * a warning is given, or before the link is dropped.  all servers
	 * should run ntpdate/rdate to keep clocks in sync
	 */
	ts_warn_delta = 30 seconds;
	ts_max_delta = 5 minutes;

	/*
	 * warn_no_nline: warn opers about servers that try to connect but
	 * we don't have a connect {} block for.  Twits with misconfigured 
	 * servers can get really annoying with this enabled.
	 */
	warn_no_nline = yes;

	/*
	 * stats_e_disabled: set this to 'yes' to disable "STATS e" for both
	 * operators and administrators.  Doing so is a good idea in case
	 * there are any exempted (exempt{}) server IPs you don't want to
	 * see leaked.
	 */
	stats_e_disabled = no;

	/* stats_o_oper only: make stats o (opers) oper only */
	stats_o_oper_only = yes;

	/* stats_P_oper_only: make stats P (ports) oper only */
	stats_P_oper_only = yes;

	/*
	 * stats i oper only: make stats i (auth {}) oper only. set to:
	 *     yes:    show users no auth blocks, made oper only.
	 *     masked: show users first matching auth block
	 *     no:     show users all auth blocks.
	 */
	stats_i_oper_only = yes;

	/*
	 * stats_k_oper_only: make stats k/K (klines) oper only.  set to:
	 *     yes:    show users no auth blocks, made oper only
	 *     masked: show users first matching auth block
	 *     no:     show users all auth blocks.
	 */
	stats_k_oper_only = yes;

	/*
	 * caller_id_wait: time between notifying a +g user that somebody
	 * is messaging them.
	 */
	caller_id_wait = 1 minute;

	/*
	 * opers_bypass_callerid: allows operators to bypass +g and message
	 * anyone who has it set (useful if you use services).
	 */
	opers_bypass_callerid = no;

	/*
	 * pace_wait_simple: time between use of less intensive commands
	 * (ADMIN, HELP, (L)USERS, VERSION, remote WHOIS)
	 */
	pace_wait_simple = 1 second;

	/*
	 * pace_wait: time between more intensive commands
	 * (AWAY, INFO, LINKS, MAP, MOTD, STATS, WHO, wildcard WHOIS, WHOWAS)
	 */
	pace_wait = 10 seconds;

	/*
	 * short_motd: send clients a notice telling them to read the motd
	 * instead of forcing a motd to clients who may simply ignore it.
	 */
	short_motd = no;

	/*
	 * ping_cookie: require clients to respond exactly to a ping command,
	 * can help block certain types of drones and FTP PASV mode spoofing.
	 */
	ping_cookie = no;

	/* no_oper_flood: increase flood limits for opers. */
	no_oper_flood = yes;

	/*
	 * true_no_oper_flood: completely eliminate flood limits for opers
	 * and for clients with can_flood = yes in their auth {} blocks
	 */
	true_no_oper_flood = yes;

	/* oper_pass_resv: allow opers to over-ride RESVs on nicks/channels */
	oper_pass_resv = yes;

	/* REMOVE ME.  The following line checks you've been reading. */
	#havent_read_conf = 1;

	/*
	 * max_targets: the maximum amount of targets in a single 
	 * PRIVMSG/NOTICE.  Set to 999 NOT 0 for unlimited.
	 */
	max_targets = 4;

	/*
	 * message_locale: the default message locale
	 * Use "standard" for the compiled in defaults.
	 * To install the translated messages, go into messages/ in the
	 * source directory and run `make install'.
	 */
	message_locale = "standard";

	/*
	 * usermodes configurable: a list of usermodes for the options below
	 *
	 * +b - bots         - See bot and drone flooding notices
	 * +c - cconn        - Client connection/quit notices
	 * +C - cconn_full   - Client connection/quit notices full
	 * +D - deaf         - Don't receive channel messages
	 * +d - debug        - See debugging notices
	 * +e - external     - See remote server connection and split notices
	 * +f - full         - See auth{} block full notices
	 * +G - softcallerid - Server Side Ignore for users not on your channels
	 * +g - callerid     - Server Side Ignore (for privmsgs etc)
	 * +H - hidden       - Hides operator status to other users
	 * +i - invisible    - Not shown in NAMES or WHO unless you share a 
	 *                     a channel
	 * +j - rej          - See rejected client notices
	 * +k - skill        - See server generated KILL messages
	 * +l - locops       - See LOCOPS messages
	 * +n - nchange      - See client nick changes
	 * +s - servnotice   - See general server notices
	 * +u - unauth       - See unauthorized client notices
	 * +w - wallop       - See server generated WALLOPS
	 * +y - spy          - See LINKS, STATS, TRACE notices etc.
	 * +z - operwall     - See oper generated WALLOPS
	 */

	/* oper_only_umodes: usermodes only opers may set */
	oper_only_umodes = bots, cconn, cconn_full, debug, full, hidden, skill,
                           nchange, rej, spy, external, operwall,
                           locops, unauth;

	/* oper_umodes: default usermodes opers get when they /oper */
	oper_umodes = bots, locops, servnotice, operwall, wallop;

	/*
	 * use_egd: if your system does not have *random devices yet you
	 * want to use OpenSSL and encrypted links, enable this.  Beware -
	 * EGD is *very* CPU intensive when gathering data for its pool
	 */
#	use_egd = yes;

	/*
	 * egdpool_path: path to EGD pool. Not necessary for OpenSSL >= 0.9.7
	 * which automatically finds the path.
	 */
#	egdpool_path = "/var/run/egd-pool";

	/*
	 * throttle_time: the minimum amount of time between connections from
	 * the same ip.  exempt {} blocks are excluded from this throttling.
	 * Offers protection against flooders who reconnect quickly.  
	 * Set to 0 to disable.
	 */
	throttle_time = 10;
};

modules {
	/*
	 * path: other paths to search for modules specified below
	 * and in "/module load".
	 */
	path = "/usr/lib/ircd-hybrid/modules";
	path = "/usr/lib/ircd-hybrid/modules/autoload";

	/* module: the name of a module to load on startup/rehash */
	#module = "some_module.la";
};

/*
 * log {}:  contains information about logfiles.
 */
log {
	/* Do you want to enable logging to ircd.log? */
	use_logging = yes;

	file {
		type = oper;
		name = "/var/log/ircd/ircd-hybrid-oper.log";
		size = 10 megabytes;
	};

	file {
		type = user;
		name = "/var/log/ircd/ircd-hybrid-user.log";
		size = 10 megabytes;
	};

	file {
		type = kill;
		name = "/var/log/ircd/ircd-hybrid-kill.log";
		size = 10 megabytes;
	};

	file {
		type = kline;
		name = "/var/log/ircd/ircd-hybrid-kline.log";
		size = 10 megabytes;
	};

	file {
		type = dline;
		name = "/var/log/ircd/ircd-hybrid-dline.log";
		size = 10 megabytes;
	};

	file {
		type = gline;
		name = "/var/log/ircd/ircd-hybrid-gline.log";
		size = 10 megabytes;
	};

	file {
		type = debug;
		name = "/var/log/ircd/ircd-hybrid-debug.log";
		size = 10 megabytes;
        };
};
